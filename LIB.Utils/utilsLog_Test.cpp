#include "utilsLog.h"
#include "utilsTest.h"
#include <chrono>
#include <ctime>

#include <iomanip>
#include <iostream>
#include <thread>

class tLogger : public utils::log::tLog
{
protected:
	std::string GetLabel() const override final
	{
		return "SIGN";
	}

	void WriteLog(const std::string& text) override final
	{
		std::cout << text;
	}
	void WriteLogFile(const std::string& text) override final
	{
		//std::cout << text;
	}
};

namespace utils
{

void UnitTest_tLog()
{
	std::cout << "\n""utils::tLog" << std::endl;

	using namespace std::chrono_literals;

	tLogger Log;

	Log.Write(true, "Write light cyan", log::tColor::LightCyan);
	Log.Write(false, "Write light magenta", log::tColor::LightMagenta);
	Log.Write(false, "Write light green", log::tColor::LightGreen);
	Log.WriteLine();

	std::this_thread::sleep_for(std::chrono::milliseconds(500));

	Log.WriteLine(true, "Write blue", log::tColor::Blue);
	Log.WriteLine(false, "Write yellow", log::tColor::Yellow);
	Log.WriteLine(true, std::string("Write light yellow"), log::tColor::LightYellow);
	Log.WriteLine(true, std::string(" -- Write light green... MAY BE IMPORTANT INFORMATION\n""that's something instead of info-block...\n""in previous versions..."), log::tColor::LightGreen);
	Log.WriteLine(false, "One more info block...\n""with another colour :)", log::tColor::Magenta);
	Log.WriteHex(true, "WriteHex", { 0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F }, log::tColor::Green);
	std::this_thread::sleep_for(1s);
	Log.WriteHex(true, "WriteHex", { 0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C }, log::tColor::Cyan);
	Log.WriteHex(false, "WriteHex", { 0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16 }, log::tColor::Default);
	Log.WriteHex(false, "WriteHex", log::tColor::LightCyan, { 0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16 }, log::tColor::LightGreen);
	Log.WriteHex(false, "WriteHex", log::tColor::LightCyan,
		{
			0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,
			0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,
			0x20
		}, log::tColor::LightGreen, 1, 1);
	Log.WriteHex(false, "WriteHex", log::tColor::LightCyan, 
		{
			0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,
			0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,
			0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,
		}, log::tColor::LightGreen, 1, 1);
	Log.WriteHex(false, "WriteHex", log::tColor::LightCyan, 
		{
			0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,
			0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,
			0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F,
		}, log::tColor::LightGreen, 1, 1);
	Log.WriteHex(false, "WriteHex", log::tColor::LightCyan,
		{
			0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,
			0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,
			0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F,
			0x30,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F,
			0x40,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F,
			0x50,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F,
			0x60,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,
		}, log::tColor::LightGreen, 3, 2);


	Log.Write(true, "Write light cyan", log::tColor::LightCyan);
	Log.Write(false, "Write light magenta", log::tColor::LightMagenta);
	Log.Write(false, "Write light green", log::tColor::LightGreen);
	Log.WriteLine();
	Log.Write(true, "Write default color");
	Log.WriteLine();
	Log.WriteHex(false, "WriteHex",
		{
			0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,
			0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,
			0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F,
			0x30,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F,
			0x40,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F,
			0x50,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F,
			0x60,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,
		}, 3, 2);

	std::cout << std::endl;
}

}
