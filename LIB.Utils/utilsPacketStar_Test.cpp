#include "utilsPacket_Test.h"
#include "utilsPacketStar.h"

#include <iostream>
#include <vector>

namespace utils
{

void UnitTest_PacketStar()
{
	std::cout << "\n""utils::packet::tPacketStar\n";

	using tPacketSimple = packet::star::example::tPacketSimple;

	UnitTest_Packet_Find<tPacketSimple>("std::vector<std::uint8_t> Test 1",
		std::vector<std::uint8_t>{ 0x2A, 0x09, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0xB0, 0x8D },
		std::vector<std::uint8_t>{ 0x2A, 0x09, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0xB0, 0x8D });

	UnitTest_Packet_Find<tPacketSimple>("std::vector<std::uint8_t> Test 2",
		std::vector<std::uint8_t>{ 0x2A, 0x09, 0x00,
					  0x2A, 0x09, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0xB0, 0x8D },
		std::vector<std::uint8_t>{ 0x2A, 0x09, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0xB0, 0x8D });


	UnitTest_Packet_Find<tPacketSimple>("std::vector<std::uint8_t> Test 3",
		std::vector<std::uint8_t>{ 0x2A, 0x09, 0x00,
					  0x2A, 0x09, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0xB0, 0x8D,
					  0x2A, 0x09, 0x00 },
		std::vector<std::uint8_t>{ 0x2A, 0x09, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0xB0, 0x8D });

	UnitTest_Packet_Find<tPacketSimple>("std::vector<std::uint8_t> Test 4",
		std::vector<std::uint8_t>{ 0x2A, 0x09, 0x00,
					  0x2A, 0x09, 0x00 },
		std::vector<std::uint8_t>{});

	//UnitTest_Packet_Parse<tPacketSimple>("std::vector<std::uint8_t> Parse 1",
	//	std::vector<std::uint8_t>{ 0x2A, 0x09, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0xB0, 0x8D },
	//	std::vector<std::uint8_t>{ 0x2A, 0x09, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0xB0, 0x8D });

	using tPacketMsg = packet::star::example::tPacketMsg;

	UnitTest_Packet_Find<tPacketMsg>("tPayloadCommon Find 1",
		std::vector<std::uint8_t>{ 0x2A, 0x09, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0xB0, 0x8D },
		std::vector<std::uint8_t>{ 0x2A, 0x09, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0xB0, 0x8D });

	UnitTest_Packet_Find<tPacketMsg>("tPayloadCommon Find 2",
		std::vector<std::uint8_t>{ 0x2A, 0x09, 0x00,
					  0x2A, 0x09, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0xB0, 0x8D },
		std::vector<std::uint8_t>{ 0x2A, 0x09, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0xB0, 0x8D });


	UnitTest_Packet_Find<tPacketMsg>("tPayloadCommon Find 3",
		std::vector<std::uint8_t>{ 0x2A, 0x09, 0x00,
					  0x2A, 0x09, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0xB0, 0x8D,
					  0x2A, 0x09, 0x00 },
		std::vector<std::uint8_t>{ 0x2A, 0x09, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0xB0, 0x8D });

	UnitTest_Packet_Find<tPacketMsg>("tPayloadCommon Find 4",
		std::vector<std::uint8_t>{ 0x2A, 0x09, 0x00,
					  0x2A, 0x09, 0x00 },
		std::vector<std::uint8_t>{});

	UnitTest_Packet_Parse<tPacketMsg>("tPacketCmd Parse: MakeSomeMessage_01",
		std::vector<std::uint8_t>{ 0x2A, 0x09, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0xB0, 0x8D },
		tPacketMsg::MakeSomeMessage_01({ 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09 }));

	UnitTest_Packet_Make("tPayloadCommon Make: MakeSomeMessage_01",
		tPacketMsg::MakeSomeMessage_01({ 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09 }));

	std::cout << std::endl;
}

}